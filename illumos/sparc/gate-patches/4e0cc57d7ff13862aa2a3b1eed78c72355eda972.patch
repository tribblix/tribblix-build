From 4e0cc57d7ff13862aa2a3b1eed78c72355eda972 Mon Sep 17 00:00:00 2001
From: Bill Sommerfeld <sommerfeld@hamachi.org>
Date: Wed, 24 Apr 2024 14:07:18 -0700
Subject: [PATCH] 16350 SHA1 may produce incorrect hashes if given a 2^29 byte
 input Reviewed by: Robert Mustacchi <rm+illumos@fingolfin.org> Approved by:
 Gordon Ross <gordon.w.ross@gmail.com>

---
 usr/src/common/crypto/sha1/sha1.c             | 36 ++++++++++--
 .../crypto-tests/tests/longhash/longhash.c    | 58 ++++++++++++++++++-
 2 files changed, 85 insertions(+), 9 deletions(-)

diff --git a/usr/src/common/crypto/sha1/sha1.c b/usr/src/common/crypto/sha1/sha1.c
index 13a1f0503d..021980ed8e 100644
--- a/usr/src/common/crypto/sha1/sha1.c
+++ b/usr/src/common/crypto/sha1/sha1.c
@@ -34,6 +34,7 @@
 
 #if defined(_STANDALONE)
 #include <sys/cdefs.h>
+#include <stdint.h>
 #define	_RESTRICT_KYWD	restrict
 #else
 #if !defined(_KERNEL) && !defined(_BOOT)
@@ -46,6 +47,9 @@
 #endif	/* _STANDALONE */
 
 #include <sys/types.h>
+#if !defined(_STANDALONE)
+#include <sys/inttypes.h>
+#endif
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/sysmacros.h>
@@ -178,9 +182,10 @@ extern void SHA1TransformVIS(uint64_t *, uint32_t *, uint32_t *, uint64_t *);
 void
 SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 {
-	uint32_t i, buf_index, buf_len;
+	size_t i, buf_index, buf_len;
 	uint64_t X0[40], input64[8];
 	const uint8_t *input = inptr;
+	uint32_t il;
 #ifdef _KERNEL
 	int usevis = 0;
 #else
@@ -194,8 +199,17 @@ SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 	/* compute number of bytes mod 64 */
 	buf_index = (ctx->count[1] >> 3) & 0x3F;
 
+	/*
+	 * Extract low 32 bits of input_len; when we adjust
+	 * count[0] we must fold in the carry from the
+	 * addition of the low bits along with the nonzero
+	 * upper bits (if any) from input_len.
+	 */
+	il = input_len & UINT32_MAX;
+	il = il << 3;
+
 	/* update number of bits */
-	if ((ctx->count[1] += (input_len << 3)) < (input_len << 3))
+	if ((ctx->count[1] += il) < il)
 		ctx->count[0]++;
 
 	ctx->count[0] += (input_len >> 29);
@@ -209,7 +223,7 @@ SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 		kfpu_t *fpu;
 		if (fpu_exists) {
 			uint8_t fpua[sizeof (kfpu_t) + GSR_SIZE + VIS_ALIGN];
-			uint32_t len = (input_len + buf_index) & ~0x3f;
+			size_t len = (input_len + buf_index) & ~0x3f;
 			int svfp_ok;
 
 			fpu = (kfpu_t *)P2ROUNDUP((uintptr_t)fpua, 64);
@@ -325,10 +339,11 @@ SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 void
 SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 {
-	uint32_t i, buf_index, buf_len;
+	size_t i, buf_index, buf_len;
 	const uint8_t *input = inptr;
+	uint32_t il;
 #if defined(__amd64)
-	uint32_t	block_count;
+	size_t	block_count;
 #endif	/* __amd64 */
 
 	/* check for noop */
@@ -338,8 +353,17 @@ SHA1Update(SHA1_CTX *ctx, const void *inptr, size_t input_len)
 	/* compute number of bytes mod 64 */
 	buf_index = (ctx->count[1] >> 3) & 0x3F;
 
+	/*
+	 * Extract low 32 bits of input_len; when we adjust
+	 * count[0] we must fold in the carry from the
+	 * addition of the low bits along with the nonzero
+	 * upper bits (if any) from input_len.
+	 */
+	il = input_len & UINT32_MAX;
+	il = il << 3;
+
 	/* update number of bits */
-	if ((ctx->count[1] += (input_len << 3)) < (input_len << 3))
+	if ((ctx->count[1] += il) < il)
 		ctx->count[0]++;
 
 	ctx->count[0] += (input_len >> 29);
diff --git a/usr/src/test/crypto-tests/tests/longhash/longhash.c b/usr/src/test/crypto-tests/tests/longhash/longhash.c
index 7344ce67e8..3b2b59ab60 100644
--- a/usr/src/test/crypto-tests/tests/longhash/longhash.c
+++ b/usr/src/test/crypto-tests/tests/longhash/longhash.c
@@ -14,14 +14,14 @@
  */
 
 /*
- * Test that SHA2Update correctly adjusts the bit count
+ * Test that SHA1Update and SHA2Update correctly adjust the bit count
  * when fed large inputs.
  *
  * This is a very focussed white-box unit test that examines
- * handling of the running message bit count updated by SHA2Update.
+ * handling of the running message bit count updated by SHA*Update.
  *
  * Since we are only testing the bit count updates in this test,
- * we point SHA2Update at a buffer with an unmapped page, catch
+ * we point SHA*Update at a buffer with an unmapped page, catch
  * the SIGSEGV, and siglongjmp back out to the test assertions.
  */
 
@@ -33,6 +33,7 @@
 #include <signal.h>
 #include <setjmp.h>
 
+#include <sha1.h>
 #include <sha2.h>
 #include <sys/debug.h>
 #include <sys/mman.h>
@@ -58,6 +59,52 @@ trap_handler(int signo, siginfo_t *info, void *ucp)
 
 }
 
+static void
+test_update_sha1(void *buf, size_t len, uint32_t c0, uint32_t c1)
+{
+	SHA1_CTX ctx;
+	VERIFY3U(len, >, pagesize);
+
+	SHA1Init(&ctx);
+	VERIFY3U(0, ==, ctx.count[0]);
+	VERIFY3U(0, ==, ctx.count[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA1Update(&ctx, buf, len);
+		errx(EXIT_FAILURE, "Should have faulted in SHA1Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count[0]);
+		VERIFY3U(c1, ==, ctx.count[1]);
+	}
+
+	if (len <= pagesize * 2)
+		return;
+
+	/*
+	 * Try again with the same length split across two calls
+	 * to SHA1Update to exercise the other way that the high
+	 * order word of the bit count gets incremented.
+	 */
+	SHA1Init(&ctx);
+	SHA1Update(&ctx, buf, pagesize);
+	VERIFY3U(0, ==, ctx.count[0]);
+	VERIFY3U(pagesize * 8, ==, ctx.count[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA1Update(&ctx, buf, len - pagesize);
+		errx(EXIT_FAILURE, "Should have faulted in SHA1Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count[0]);
+		VERIFY3U(c1, ==, ctx.count[1]);
+	}
+}
+
 static void
 test_update_32(uint64_t mech, void *buf, size_t len, uint32_t c0, uint32_t c1)
 {
@@ -179,6 +226,11 @@ main(int argc, char **argv)
 	trap_sa.sa_sigaction = trap_handler;
 
 	max_len = SIZE_MAX;
+	for (len = pagesize * 2; len != 0 && len < max_len; len <<= 1) {
+		printf("test SHA1 length 0x%016lx\n", len);
+		test_update_sha1(buf, len, len >> 29, len << 3);
+	}
+
 	for (len = pagesize * 2; len != 0 && len < max_len; len <<= 1) {
 		printf("test SHA256 length 0x%016lx\n", len);
 		test_update_32(SHA256, buf, len, len >> 29, len << 3);
-- 
2.46.0

