From b70bf3ee79d81df3ccc36e553e0ff11049a2b51a Mon Sep 17 00:00:00 2001
From: Bill Sommerfeld <sommerfeld@hamachi.org>
Date: Wed, 28 Feb 2024 11:33:17 -0800
Subject: [PATCH] 16317 SHA2Update() is wrong for 512 MiB or bigger blocks
 Reviewed by: Robert Mustacchi <rm+illumos@fingolfin.org> Reviewed by: Marcel
 Telka <marcel@telka.sk> Reviewed by: Toomas Soome <tsoome@me.com> Approved
 by: Dan McDonald <danmcd@mnx.io>

---
 usr/src/common/crypto/sha2/sha2.c             |  18 +-
 .../pkg/manifests/system-test-cryptotest.p5m  |   3 +
 .../test/crypto-tests/runfiles/default.run    |   3 +
 usr/src/test/crypto-tests/tests/Makefile      |   2 +-
 .../test/crypto-tests/tests/longhash/Makefile |  30 +++
 .../tests/longhash/Makefile.longhash          |  78 +++++++
 .../crypto-tests/tests/longhash/longhash.c    | 192 ++++++++++++++++++
 7 files changed, 321 insertions(+), 5 deletions(-)
 create mode 100644 usr/src/test/crypto-tests/tests/longhash/Makefile
 create mode 100644 usr/src/test/crypto-tests/tests/longhash/Makefile.longhash
 create mode 100644 usr/src/test/crypto-tests/tests/longhash/longhash.c

diff --git a/usr/src/common/crypto/sha2/sha2.c b/usr/src/common/crypto/sha2/sha2.c
index 573f1cfb3c..3ddf19c473 100644
--- a/usr/src/common/crypto/sha2/sha2.c
+++ b/usr/src/common/crypto/sha2/sha2.c
@@ -4,6 +4,7 @@
  */
 /*
  * Copyright 2013 Saso Kiselkov.  All rights reserved.
+ * Copyright 2024 Bill Sommerfeld <sommerfeld@hamachi.org>
  */
 
 /*
@@ -788,11 +789,11 @@ SHA512Init(SHA512_CTX *ctx)
 void
 SHA2Update(SHA2_CTX *ctx, const void *inptr, size_t input_len)
 {
-	uint32_t	i, buf_index, buf_len, buf_limit;
+	size_t		i, buf_index, buf_len, buf_limit;
 	const uint8_t	*input = inptr;
 	uint32_t	algotype = ctx->algotype;
 #if defined(__amd64)
-	uint32_t	block_count;
+	size_t		block_count;
 #endif	/* !__amd64 */
 
 
@@ -801,13 +802,22 @@ SHA2Update(SHA2_CTX *ctx, const void *inptr, size_t input_len)
 		return;
 
 	if (algotype <= SHA256_HMAC_GEN_MECH_INFO_TYPE) {
+		/*
+		 * Extract low 32 bits of input_len; when we adjust
+		 * count.c32[0] we must fold in the carry from the
+		 * addition of the low bits along with the nonzero
+		 * upper bits (if any) from input_len.
+		 */
+		uint32_t il = input_len & UINT32_MAX;
+
+		il = il << 3;
 		buf_limit = 64;
 
 		/* compute number of bytes mod 64 */
 		buf_index = (ctx->count.c32[1] >> 3) & 0x3F;
 
 		/* update number of bits */
-		if ((ctx->count.c32[1] += (input_len << 3)) < (input_len << 3))
+		if ((ctx->count.c32[1] += il) < il)
 			ctx->count.c32[0]++;
 
 		ctx->count.c32[0] += (input_len >> 29);
@@ -825,7 +835,7 @@ SHA2Update(SHA2_CTX *ctx, const void *inptr, size_t input_len)
 		if ((ctx->count.c64[1] += il) < il)
 			ctx->count.c64[0]++;
 
-		ctx->count.c64[0] += (input_len >> 29);
+		ctx->count.c64[0] += ((uintmax_t)input_len >> 61);
 	}
 
 	buf_len = buf_limit - buf_index;
diff --git a/usr/src/pkg/manifests/system-test-cryptotest.p5m b/usr/src/pkg/manifests/system-test-cryptotest.p5m
index 8362bcca37..c5209a9d05 100644
--- a/usr/src/pkg/manifests/system-test-cryptotest.p5m
+++ b/usr/src/pkg/manifests/system-test-cryptotest.p5m
@@ -234,6 +234,9 @@ file path=opt/crypto-tests/tests/hmac/kcf/setup mode=0555
 dir  path=opt/crypto-tests/tests/hmac/pkcs
 file path=opt/crypto-tests/tests/hmac/pkcs/hmac_sha1_32 mode=0555
 file path=opt/crypto-tests/tests/hmac/pkcs/hmac_sha1_64 mode=0555
+dir  path=opt/crypto-tests/tests/longhash
+file path=opt/crypto-tests/tests/longhash/longhash_32 mode=0555
+file path=opt/crypto-tests/tests/longhash/longhash_64 mode=0555
 license cr_Sun license=cr_Sun
 license lic_CDDL license=lic_CDDL
 depend type=require fmri=driver/crypto/dprov
diff --git a/usr/src/test/crypto-tests/runfiles/default.run b/usr/src/test/crypto-tests/runfiles/default.run
index bfda2b5eae..fac21c1b97 100644
--- a/usr/src/test/crypto-tests/runfiles/default.run
+++ b/usr/src/test/crypto-tests/runfiles/default.run
@@ -66,3 +66,6 @@ pre = setup
 user = root
 tests = ['hmac_sha1_32', 'hmac_sha1_64']
 post = cleanup
+
+[/opt/crypto-tests/tests/longhash]
+tests = ['longhash_32', 'longhash_64']
diff --git a/usr/src/test/crypto-tests/tests/Makefile b/usr/src/test/crypto-tests/tests/Makefile
index 0c35c9f7cf..dadc6d15bb 100644
--- a/usr/src/test/crypto-tests/tests/Makefile
+++ b/usr/src/test/crypto-tests/tests/Makefile
@@ -14,7 +14,7 @@
 # Copyright 2019 Joyent, Inc.
 #
 
-SUBDIRS = modes common digest hmac
+SUBDIRS = modes common digest hmac longhash
 
 all: $(SUBDIRS)
 
diff --git a/usr/src/test/crypto-tests/tests/longhash/Makefile b/usr/src/test/crypto-tests/tests/longhash/Makefile
new file mode 100644
index 0000000000..9713c7901a
--- /dev/null
+++ b/usr/src/test/crypto-tests/tests/longhash/Makefile
@@ -0,0 +1,30 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2024 Bill Sommerfeld <sommerfeld@hamachi.org>
+#
+
+ALGS	= longhash
+
+all	:=	TARGET = all
+install	:=	TARGET = install
+clean	:=	TARGET = clean
+clobber	:=	TARGET = clobber
+
+.KEEP_STATE:
+
+all clean clobber install: $(ALGS)
+
+$(ALGS): FRC
+	$(MAKE) -e -f Makefile.longhash BASEPROG=$@ $(TARGET)
+
+FRC:
diff --git a/usr/src/test/crypto-tests/tests/longhash/Makefile.longhash b/usr/src/test/crypto-tests/tests/longhash/Makefile.longhash
new file mode 100644
index 0000000000..2530067d29
--- /dev/null
+++ b/usr/src/test/crypto-tests/tests/longhash/Makefile.longhash
@@ -0,0 +1,78 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2024 Bill Sommerfeld <sommerfeld@hamachi.org>
+#
+
+TESTDIR	= $(ROOT)/opt/crypto-tests/tests/longhash
+
+include $(SRC)/cmd/Makefile.cmd
+include $(SRC)/test/Makefile.com
+include $(SRC)/cmd/Makefile.ctf
+
+PROGS_32 = $(BASEPROG)_32
+PROGS_64 = $(BASEPROG)_64
+PROGS = $(PROGS_32) $(PROGS_64)
+
+COMMON_OBJS_32 = $(COMMON_OBJS:%.o=%.32.o)
+COMMON_OBJS_64 = $(COMMON_OBJS:%.o=%.64.o)
+
+COMMONDIR = $(SRC)/test/crypto-tests/tests/common
+
+$(PROGS_32) := OBJS += $(BASEPROG:%=%.32.o) $(COMMON_OBJS_32)
+$(PROGS_64) := OBJS += $(BASEPROG:%=%.64.o) $(COMMON_OBJS_64)
+$(PROGS_64) := LDLIBS += $(LDLIBS64)
+
+LDLIBS += -lmd
+
+CSTD = $(CSTD_GNU99)
+
+CMDS = $(PROGS:%=$(TESTDIR)/%)
+
+$(CMDS) := FILEMODE = 0555
+
+all: $(PROGS)
+
+%_32: %.32.o $(COMMON_OBJS_32)
+	$(LINK.c) $(OBJS) -o $@ $(LDLIBS)
+	$(POST_PROCESS)
+
+%_64: %.64.o $(COMMON_OBJS_64)
+	$(LINK64.c) $(OBJS) -o $@ $(LDLIBS)
+	$(POST_PROCESS)
+
+%.32.o: %.c
+	$(COMPILE.c) -o $@ $<
+	$(POST_PROCESS_O)
+
+%.64.o: %.c
+	$(COMPILE64.c) -o $@ $<
+	$(POST_PROCESS_O)
+
+install: all $(CMDS)
+
+clobber: clean
+	-$(RM) $(PROGS)
+
+clean:
+	-$(RM) *.o $(PROGS)
+
+$(CMDS): $(TESTDIR) $(PROGS)
+
+$(TESTDIR):
+	$(INS.dir)
+
+$(TESTDIR)/%_32: %_32
+	$(INS.file)
+
+$(TESTDIR)/%_64: %_64
+	$(INS.file)
diff --git a/usr/src/test/crypto-tests/tests/longhash/longhash.c b/usr/src/test/crypto-tests/tests/longhash/longhash.c
new file mode 100644
index 0000000000..7344ce67e8
--- /dev/null
+++ b/usr/src/test/crypto-tests/tests/longhash/longhash.c
@@ -0,0 +1,192 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2024 Bill Sommerfeld <sommerfeld@hamachi.org>
+ */
+
+/*
+ * Test that SHA2Update correctly adjusts the bit count
+ * when fed large inputs.
+ *
+ * This is a very focussed white-box unit test that examines
+ * handling of the running message bit count updated by SHA2Update.
+ *
+ * Since we are only testing the bit count updates in this test,
+ * we point SHA2Update at a buffer with an unmapped page, catch
+ * the SIGSEGV, and siglongjmp back out to the test assertions.
+ */
+
+#include <err.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <signal.h>
+#include <setjmp.h>
+
+#include <sha2.h>
+#include <sys/debug.h>
+#include <sys/mman.h>
+
+static sigjmp_buf from_trap;
+static struct sigaction trap_sa;
+static void *buf;
+
+static long pagesize;
+
+static void
+trap_handler(int signo, siginfo_t *info, void *ucp)
+{
+
+	if ((info->si_addr >= buf + pagesize) &&
+	    (info->si_addr < (buf + 2 * pagesize))) {
+		siglongjmp(from_trap, signo);
+	}
+
+	printf("faulting address outside sentinel page\n");
+	printf("signal: %d code: %d faulting address: %p\n",
+	    info->si_signo, info->si_code, info->si_addr);
+
+}
+
+static void
+test_update_32(uint64_t mech, void *buf, size_t len, uint32_t c0, uint32_t c1)
+{
+	SHA2_CTX ctx;
+	VERIFY3U(len, >, pagesize);
+
+	SHA2Init(mech, &ctx);
+	VERIFY3U(0, ==, ctx.count.c32[0]);
+	VERIFY3U(0, ==, ctx.count.c32[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA2Update(&ctx, buf, len);
+		errx(EXIT_FAILURE, "Should have faulted in SHA2Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count.c32[0]);
+		VERIFY3U(c1, ==, ctx.count.c32[1]);
+	}
+
+	if (len <= pagesize * 2)
+		return;
+
+	/*
+	 * Try again with the same length split across two calls
+	 * to SHA2Update to exercise the other way that the high
+	 * order word of the bit count gets incremented.
+	 */
+	SHA2Init(mech, &ctx);
+	SHA2Update(&ctx, buf, pagesize);
+	VERIFY3U(0, ==, ctx.count.c32[0]);
+	VERIFY3U(pagesize * 8, ==, ctx.count.c32[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA2Update(&ctx, buf, len - pagesize);
+		errx(EXIT_FAILURE, "Should have faulted in SHA2Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count.c32[0]);
+		VERIFY3U(c1, ==, ctx.count.c32[1]);
+	}
+}
+
+static void
+test_update_64(uint64_t mech, void *buf, size_t len, uint64_t c0, uint64_t c1)
+{
+	SHA2_CTX ctx;
+	VERIFY3U(len, >, pagesize);
+
+	SHA2Init(mech, &ctx);
+	VERIFY3U(0, ==, ctx.count.c64[0]);
+	VERIFY3U(0, ==, ctx.count.c64[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA2Update(&ctx, buf, len);
+		errx(EXIT_FAILURE, "Should have faulted in SHA2Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count.c64[0]);
+		VERIFY3U(c1, ==, ctx.count.c64[1]);
+	}
+
+	if (len <= pagesize * 2)
+		return;
+
+	/*
+	 * Try again with the same length split across two calls
+	 * to SHA2Update to exercise the other way that the high
+	 * order word of the bit count gets incremented.
+	 */
+	SHA2Init(mech, &ctx);
+	SHA2Update(&ctx, buf, pagesize);
+	VERIFY3U(0, ==, ctx.count.c64[0]);
+	VERIFY3U(pagesize * 8, ==, ctx.count.c64[1]);
+
+	if (sigsetjmp(from_trap, 1) == 0) {
+		(void) sigaction(SIGSEGV, &trap_sa, NULL);
+		SHA2Update(&ctx, buf, len - pagesize);
+		errx(EXIT_FAILURE, "Should have faulted in SHA2Update "
+		    "(after %ld of %zu bytes)", pagesize, len);
+	} else {
+		(void) signal(SIGSEGV, SIG_DFL);
+		VERIFY3U(c0, ==, ctx.count.c64[0]);
+		VERIFY3U(c1, ==, ctx.count.c64[1]);
+	}
+}
+
+int
+main(int argc, char **argv)
+{
+	uint64_t len, max_len;
+	int flags = MAP_PRIVATE|MAP_ANON;
+
+#ifdef _LP64
+	flags |= MAP_32BIT;
+#endif
+	pagesize = sysconf(_SC_PAGESIZE);
+	buf = mmap(0, 2 * pagesize, PROT_READ|PROT_WRITE, flags, -1, 0);
+	if (buf == MAP_FAILED) {
+		err(EXIT_FAILURE, "mmap MAP_PRIVATE|MAP_ANON|... "
+		    "of %ld bytes failed", 2 * pagesize);
+	}
+	if (mprotect(buf + pagesize, pagesize, PROT_NONE) < 0) {
+		err(EXIT_FAILURE, "mprotect of %ld bytes at %p failed",
+		    pagesize, buf + pagesize);
+	}
+
+	/*
+	 * When we set this sigaction, we intend to catch exactly one trap:
+	 * a memory reference to the page we've just protected.
+	 */
+	memset(&trap_sa, 0, sizeof (trap_sa));
+	trap_sa.sa_flags = SA_SIGINFO|SA_RESETHAND;
+	trap_sa.sa_sigaction = trap_handler;
+
+	max_len = SIZE_MAX;
+	for (len = pagesize * 2; len != 0 && len < max_len; len <<= 1) {
+		printf("test SHA256 length 0x%016lx\n", len);
+		test_update_32(SHA256, buf, len, len >> 29, len << 3);
+	}
+
+	for (len = pagesize * 2; len != 0 && len < max_len; len <<= 1) {
+		printf("test SHA512 length 0x%016lx\n", len);
+		test_update_64(SHA512, buf, len, len >> 61, len << 3);
+	}
+	return (EXIT_SUCCESS);
+}
-- 
2.43.2

