From b960b5ef739d69365f28458932126c08e93ffe7e Mon Sep 17 00:00:00 2001
From: Richard Lowe <richlowe@richlowe.net>
Date: Tue, 16 Apr 2024 22:34:38 +0000
Subject: [PATCH] 16528 clean up low-hanging warnings in svccfg(8) Reviewed by:
 Bill Sommerfeld <sommerfeld@hamachi.org> Reviewed by: Jason King
 <jason.brian.king+illumos@gmail.com> Reviewed by: Andy Fiddaman
 <illumos@fiddaman.net> Approved by: Dan McDonald <danmcd@mnx.io>

---
 usr/src/cmd/svc/common/notify_params.c |   8 +-
 usr/src/cmd/svc/svccfg/Makefile        |   6 +-
 usr/src/cmd/svc/svccfg/svccfg.h        | 239 ++++++++++++++-----------
 usr/src/cmd/svc/svccfg/svccfg.y        |   6 +-
 usr/src/cmd/svc/svccfg/svccfg_libscf.c |   2 +-
 usr/src/cmd/svc/svccfg/svccfg_main.c   |   1 +
 6 files changed, 143 insertions(+), 119 deletions(-)

diff --git a/usr/src/cmd/svc/common/notify_params.c b/usr/src/cmd/svc/common/notify_params.c
index 16104d899e..2746c2785a 100644
--- a/usr/src/cmd/svc/common/notify_params.c
+++ b/usr/src/cmd/svc/common/notify_params.c
@@ -253,13 +253,15 @@ params_type_print(nvlist_t *p, const char *name, const char *fmri)
 		if (nvpair_value_nvlist(tnvp, &nvl) != 0)
 			uu_die("nvpair_value_nvlist");
 
-		if (!has_output)
-			if (fmri == NULL)
+		if (!has_output) {
+			if (fmri == NULL) {
 				safe_printf(gettext("    Event: %s\n"), name);
-			else
+			} else {
 				safe_printf(gettext(
 				    "    Event: %s (source: %s)\n"),
 				    name, fmri);
+			}
+		}
 
 		has_output = 1;
 
diff --git a/usr/src/cmd/svc/svccfg/Makefile b/usr/src/cmd/svc/svccfg/Makefile
index d5721fd12e..d2606f36fd 100644
--- a/usr/src/cmd/svc/svccfg/Makefile
+++ b/usr/src/cmd/svc/svccfg/Makefile
@@ -72,12 +72,12 @@ $(NATIVE_BUILD)MYCPPFLAGS =	-I ../common -I$(NATIVE_ADJUNCT)/include/libxml2
 CPPFLAGS +=	$(MYCPPFLAGS)
 LDFLAGS +=	$(MAPOPTS)
 
+# These are because of bugs in lex(1)/yacc(1) generated code
 CERRWARN +=	-_gcc=-Wno-unused-label
-CERRWARN +=	-_gcc=-Wno-implicit-function-declaration
+CERRWARN +=	-_gcc=-Wno-unused-variable
+
 CERRWARN +=	-_gcc=-Wno-switch
 CERRWARN +=	$(CNOWARN_UNINIT)
-CERRWARN +=	-_gcc=-Wno-unused-variable
-CERRWARN +=	-_gcc=-Wno-parentheses
 
 # not linted
 SMATCH=off
diff --git a/usr/src/cmd/svc/svccfg/svccfg.h b/usr/src/cmd/svc/svccfg/svccfg.h
index bea09a187f..70e23e181b 100644
--- a/usr/src/cmd/svc/svccfg/svccfg.h
+++ b/usr/src/cmd/svc/svccfg/svccfg.h
@@ -74,10 +74,8 @@ extern "C" {
 /* Flags for lscf_service_export() */
 #define	SCE_ALL_VALUES	0x01		/* Include all property values */
 
-#ifdef lint
 extern int yyerror(const char *);
 extern int yyparse(void);
-#endif /* lint */
 
 extern int lex_lineno;
 
@@ -392,125 +390,148 @@ extern const char * const false;
 #define	uu_list_append(list, elem)	uu_list_insert_before(list, NULL, elem)
 #define	uu_list_prepend(list, elem)	uu_list_insert_after(list, NULL, elem)
 
-void *safe_malloc(size_t);
-char *safe_strdup(const char *);
-void warn(const char *, ...);
-void synerr(int);
-void semerr(const char *, ...);
-
-void internal_init(void);
-void internal_dump(bundle_t *);
-
-int value_cmp(const void *, const void *, void *);
-
-bundle_t *internal_bundle_new(void);
-void internal_bundle_free(bundle_t *);
-entity_t *internal_service_new(const char *);
-void internal_service_free(entity_t *);
-entity_t *internal_instance_new(const char *);
-void internal_instance_free(entity_t *);
-entity_t *internal_template_new(void);
-pgroup_t *internal_pgroup_new(void);
-void internal_pgroup_free(pgroup_t *);
-pgroup_t *internal_pgroup_find(entity_t *, const char *, const char *);
-pgroup_t *internal_dependent_find(entity_t *, const char *);
-pgroup_t *internal_pgroup_find_or_create(entity_t *, const char *,
+extern void *safe_malloc(size_t);
+extern char *safe_strdup(const char *);
+extern void warn(const char *, ...);
+extern void synerr(int);
+extern void semerr(const char *, ...);
+
+extern void internal_init(void);
+extern void internal_dump(bundle_t *);
+
+extern int value_cmp(const void *, const void *, void *);
+
+extern bundle_t *internal_bundle_new(void);
+extern void internal_bundle_free(bundle_t *);
+extern entity_t *internal_service_new(const char *);
+extern void internal_service_free(entity_t *);
+extern entity_t *internal_instance_new(const char *);
+extern void internal_instance_free(entity_t *);
+extern entity_t *internal_template_new(void);
+extern pgroup_t *internal_pgroup_new(void);
+extern void internal_pgroup_free(pgroup_t *);
+extern pgroup_t *internal_pgroup_find(entity_t *, const char *, const char *);
+extern pgroup_t *internal_dependent_find(entity_t *, const char *);
+extern pgroup_t *internal_pgroup_find_or_create(entity_t *, const char *,
     const char *);
-pgroup_t *internal_pgroup_create_strict(entity_t *, const char *,
+extern pgroup_t *internal_pgroup_create_strict(entity_t *, const char *,
     const char *);
-property_t *internal_property_new(void);
-void internal_property_free(property_t *);
-property_t *internal_property_find(pgroup_t *, const char *);
-property_t *internal_property_create(const char *, scf_type_t, uint_t, ...);
-value_t *internal_value_new(void);
-
-int internal_attach_service(bundle_t *, entity_t *);
-int internal_attach_entity(entity_t *, entity_t *);
-int internal_attach_pgroup(entity_t *, pgroup_t *);
-void internal_detach_pgroup(entity_t *, pgroup_t *);
-int internal_attach_dependent(entity_t *, pgroup_t *);
-int internal_attach_property(pgroup_t *, property_t *);
-void internal_detach_property(pgroup_t *, property_t *);
-void internal_attach_value(property_t *, value_t *);
-
-int load_init(void);
-void load_fini(void);
-int load_instance(const char *, const char *, entity_t **);
-int load_pg_attrs(const scf_propertygroup_t *, pgroup_t **);
-int load_pg(const scf_propertygroup_t *, pgroup_t **, const char *,
+extern property_t *internal_property_new(void);
+extern void internal_property_free(property_t *);
+extern property_t *internal_property_find(pgroup_t *, const char *);
+extern property_t *internal_property_create(const char *, scf_type_t,
+    uint_t, ...);
+extern value_t *internal_value_new(void);
+
+extern int internal_attach_service(bundle_t *, entity_t *);
+extern int internal_attach_entity(entity_t *, entity_t *);
+extern int internal_attach_pgroup(entity_t *, pgroup_t *);
+extern void internal_detach_pgroup(entity_t *, pgroup_t *);
+extern int internal_attach_dependent(entity_t *, pgroup_t *);
+extern int internal_attach_property(pgroup_t *, property_t *);
+extern void internal_detach_property(pgroup_t *, property_t *);
+extern void internal_attach_value(property_t *, value_t *);
+
+extern int load_init(void);
+extern void load_fini(void);
+extern int load_instance(const char *, const char *, entity_t **);
+extern int load_pg_attrs(const scf_propertygroup_t *, pgroup_t **);
+extern int load_pg(const scf_propertygroup_t *, pgroup_t **, const char *,
     const char *);
-int prop_equal(property_t *, property_t *, const char *, const char *, int);
-int pg_attrs_equal(const pgroup_t *, const pgroup_t *, const char *, int);
-int pg_equal(pgroup_t *, pgroup_t *);
-
-void lscf_cleanup(void);
-void lscf_prep_hndl(void);
-void lscf_init(void);
-int lscf_bundle_import(bundle_t *, const char *, uint_t);
-int lscf_bundle_apply(bundle_t *, const char *);
-void lscf_delete(const char *, int);
-void lscf_list(const char *);
-void lscf_select(const char *);
-void lscf_unselect();
-void lscf_get_selection_str(char *, size_t);
-void lscf_add(const char *);
-void lscf_listpg(const char *);
-void lscf_addpg(const char *, const char *, const char *);
-void lscf_delpg(char *);
-void lscf_delhash(char *, int);
-void lscf_listprop(const char *);
-void lscf_addprop(char *, const char *, const uu_list_t *);
-void lscf_delprop(char *);
-int lscf_describe(uu_list_t *, int);
-void lscf_listsnap();
-void lscf_selectsnap(const char *);
-void lscf_revert(const char *);
-void lscf_refresh();
-char *filename_to_propname(const char *);
-int lscf_retrieve_hash(const char *, unsigned char *);
-int lscf_store_hash(const char *, unsigned char *);
-int lscf_service_cleanup(void *, scf_walkinfo_t *);
-int lscf_hash_cleanup();
-void lscf_delnotify(const char *, int);
-void lscf_listnotify(const char *, int);
-int lscf_setnotify(uu_list_t *);
+extern int prop_equal(property_t *, property_t *, const char *, const char *,
+    int);
+extern int pg_attrs_equal(const pgroup_t *, const pgroup_t *, const char *,
+    int);
+extern int pg_equal(pgroup_t *, pgroup_t *);
+
+extern void lscf_cleanup(void);
+extern void lscf_prep_hndl(void);
+extern void lscf_init(void);
+extern int lscf_bundle_import(bundle_t *, const char *, uint_t);
+extern int lscf_bundle_apply(bundle_t *, const char *);
+extern void lscf_delete(const char *, int);
+extern void lscf_list(const char *);
+extern void lscf_select(const char *);
+extern void lscf_unselect();
+extern void lscf_get_selection_str(char *, size_t);
+extern void lscf_add(const char *);
+extern void lscf_listpg(const char *);
+extern void lscf_addpg(const char *, const char *, const char *);
+extern void lscf_delpg(char *);
+extern void lscf_delhash(char *, int);
+extern void lscf_listprop(const char *);
+extern void lscf_addprop(char *, const char *, const uu_list_t *);
+extern void lscf_delprop(char *);
+extern int lscf_describe(uu_list_t *, int);
+extern void lscf_listsnap();
+extern void lscf_selectsnap(const char *);
+extern void lscf_revert(const char *);
+extern void lscf_refresh();
+extern char *filename_to_propname(const char *);
+extern int lscf_retrieve_hash(const char *, unsigned char *);
+extern int lscf_store_hash(const char *, unsigned char *);
+extern int lscf_service_cleanup(void *, scf_walkinfo_t *);
+extern int lscf_hash_cleanup();
+extern void lscf_delnotify(const char *, int);
+extern void lscf_listnotify(const char *, int);
+extern int lscf_setnotify(uu_list_t *);
 
 CPL_MATCH_FN(complete_select);
 CPL_MATCH_FN(complete_command);
 
-int lxml_init(void);
-int lxml_get_bundle_file(bundle_t *, const char *, svccfg_op_t);
-void lxml_store_value(value_t *, element_t, const xmlChar *);
-
-void engine_init(void);
-int engine_exec_cmd(void);
-int engine_exec(char *);
-int add_cmd_matches(WordCompletion *, const char *, int, uint32_t);
-int engine_interp(void);
-int engine_source(const char *, boolean_t);
-int engine_import(uu_list_t *);
-int engine_cleanup(int);
-void help(int);
-
-int engine_cmd_getc(engine_state_t *);
-int engine_cmd_ungetc(engine_state_t *, char);
-void engine_cmd_nputs(engine_state_t *, char *, size_t);
-
-void tmpl_errors_destroy(tmpl_errors_t *);
-void tmpl_errors_print(FILE *, tmpl_errors_t *, const char *);
-void tmpl_init(void);
-void tmpl_property_fini(property_t *);
-void tmpl_property_init(property_t *);
-tmpl_validate_status_t tmpl_validate_bundle(bundle_t *, tmpl_errors_t **);
+extern int lxml_init(void);
+extern int lxml_get_bundle_file(bundle_t *, const char *, svccfg_op_t);
+extern void lxml_store_value(value_t *, element_t, const xmlChar *);
+extern int lxml_inventory(const char *);
+extern int lscf_editprop(void);
+extern int lscf_addpropvalue(const char *, const char *, const char *);
+extern int lscf_delpropvalue(const char *, const char *, int);
+extern int lscf_setenv(uu_list_t *, int);
+extern void lscf_validate(const char *);
+extern void lscf_validate_fmri(const char *);
+extern int lscf_service_export(char *, const char *, int);
+extern int lscf_archive(const char *, int);
+extern int lscf_profile_extract(const char *);
+extern void lscf_set_repository(const char *, int);
+extern int lscf_setprop(const char *, const char *, const char *,
+    const uu_list_t *);
+
+
+extern void engine_init(void);
+extern int engine_exec_cmd(void);
+extern int engine_exec(char *);
+extern int add_cmd_matches(WordCompletion *, const char *, int, uint32_t);
+extern int engine_interp(void);
+extern int engine_source(const char *, boolean_t);
+extern int engine_import(uu_list_t *);
+extern int engine_cleanup(int);
+extern int engine_set(uu_list_t *);
+
+extern void help(int);
+
+extern int engine_cmd_getc(engine_state_t *);
+extern int engine_cmd_ungetc(engine_state_t *, char);
+extern void engine_cmd_nputs(engine_state_t *, char *, size_t);
+extern int engine_restore(const char *);
+extern int engine_restore(const char *);
+extern int engine_apply(const char *, int);
+
+extern void tmpl_errors_destroy(tmpl_errors_t *);
+extern void tmpl_errors_print(FILE *, tmpl_errors_t *, const char *);
+extern void tmpl_init(void);
+extern void tmpl_property_fini(property_t *);
+extern void tmpl_property_init(property_t *);
+extern tmpl_validate_status_t tmpl_validate_bundle(bundle_t *,
+    tmpl_errors_t **);
 
 #define	FMA_TOKENS	0
 #define	MIXED_TOKENS	-1
 #define	INVALID_TOKENS	-2
 
-char **tokenize(char *, const char *);
-int32_t check_tokens(char **);
-const char *de_tag(const char *);
-const char *tset_to_string(int32_t);
+extern char **tokenize(char *, const char *);
+extern int32_t check_tokens(char **);
+extern const char *de_tag(const char *);
+extern const char *tset_to_string(int32_t);
 
 #ifdef	__cplusplus
 }
diff --git a/usr/src/cmd/svc/svccfg/svccfg.y b/usr/src/cmd/svc/svccfg/svccfg.y
index ec4570c766..edb24975ed 100644
--- a/usr/src/cmd/svc/svccfg/svccfg.y
+++ b/usr/src/cmd/svc/svccfg/svccfg.y
@@ -162,8 +162,8 @@ import_cmd : SCC_IMPORT string_list terminator
 	}
 	| SCC_IMPORT error terminator	{ synerr(SCC_IMPORT); return(0); }
 
-cleanup_cmd : SCC_CLEANUP terminator	
-	{ 
+cleanup_cmd : SCC_CLEANUP terminator
+	{
 		engine_cleanup(0);
 	}
 	| SCC_CLEANUP SCV_WORD terminator
@@ -575,7 +575,7 @@ delnotify_cmd : SCC_DELNOTIFY SCV_WORD terminator
 listnotify_cmd : SCC_LISTNOTIFY terminator
 	{
 		lscf_listnotify("all", 0);
-	}	
+	}
 	| SCC_LISTNOTIFY SCV_WORD terminator
 	{
 		if (strcmp($2, "-g") == 0) {
diff --git a/usr/src/cmd/svc/svccfg/svccfg_libscf.c b/usr/src/cmd/svc/svccfg/svccfg_libscf.c
index bca4ee3801..a2febebe21 100644
--- a/usr/src/cmd/svc/svccfg/svccfg_libscf.c
+++ b/usr/src/cmd/svc/svccfg/svccfg_libscf.c
@@ -14395,7 +14395,7 @@ out:
 }
 
 int
-lscf_editprop()
+lscf_editprop(void)
 {
 	char *buf, *editor;
 	size_t bufsz;
diff --git a/usr/src/cmd/svc/svccfg/svccfg_main.c b/usr/src/cmd/svc/svccfg/svccfg_main.c
index 97bd86cf4a..6a52ae0f28 100644
--- a/usr/src/cmd/svc/svccfg/svccfg_main.c
+++ b/usr/src/cmd/svc/svccfg/svccfg_main.c
@@ -49,6 +49,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <zone.h>
 
 #include "svccfg.h"
 
-- 
2.46.0

