From fe56ad39973c41aca0f8c54dc9ba08b9e5ea9189 Mon Sep 17 00:00:00 2001
From: Peter Tribble <peter.tribble@gmail.com>
Date: Mon, 20 Mar 2023 12:35:59 +0000
Subject: [PATCH] Reinstate hat_getkpfnum

---
 usr/src/uts/common/Makefile.files |   1 +
 usr/src/uts/common/vm/hat.c       | 128 ++++++++++++++++++++++++++++++
 usr/src/uts/common/vm/hat.h       |  19 +++++
 usr/src/uts/sfmmu/vm/hat_sfmmu.c  |  63 ++++++++++++++-
 usr/src/uts/sfmmu/vm/hat_sfmmu.h  |   2 +
 5 files changed, 211 insertions(+), 2 deletions(-)
 create mode 100644 usr/src/uts/common/vm/hat.c

diff --git a/usr/src/uts/common/Makefile.files b/usr/src/uts/common/Makefile.files
index 08280f318f..090b6e1fc0 100644
--- a/usr/src/uts/common/Makefile.files
+++ b/usr/src/uts/common/Makefile.files
@@ -206,6 +206,7 @@ GENUNIX_OBJS +=	\
 		gid.o		\
 		groups.o	\
 		grow.o		\
+		hat.o		\
 		hat_refmod.o	\
 		id32.o		\
 		id_space.o	\
diff --git a/usr/src/uts/common/vm/hat.c b/usr/src/uts/common/vm/hat.c
new file mode 100644
index 0000000000..483079622b
--- /dev/null
+++ b/usr/src/uts/common/vm/hat.c
@@ -0,0 +1,128 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
+ * or http://www.opensolaris.org/os/licensing.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ */
+
+/* Copyright 2023 Peter Tribble */
+
+#include <sys/param.h>
+#include <sys/kmem.h>
+#include <sys/sysmacros.h>
+#include <sys/cmn_err.h>
+#include <sys/systm.h>
+#include <sys/modctl.h>
+#include <sys/kobj.h>
+#include <vm/hat.h>
+
+/*
+ * PSARC 2004/405 made hat_getkpfnum(9F) obsolete. As part of the
+ * obsolecense, the original documented behavior will begin to be
+ * enforced in the future; namely, hat_getkpfnum(9F) may _only_
+ * be called with device-mapped memory virtual addresses. Since
+ * changing hat_getkpfnum(9F) to return PFN_INVALID on kernel memory
+ * would break a lot of modules without any warning, we've implemented
+ * the following mechanism as a stop-gap. In a future release, this
+ * can all be ripped out and hat_getkpfnum(9F) changed to return
+ * PFN_INVALID if it isn't called with a device-mapped memory address.
+ *
+ * We keep track of each module that has used hat_getkpfnum(9F)
+ * incorrectly. This allows us to avoid flooding the console/logs
+ * with too many warnings about a bad module that has already been
+ * flagged.
+ *
+ * hat_getkpfnum() is only supported on SPARC.
+ */
+
+#ifdef	__sparc
+
+#define	HAT_STACK_MAXDEPTH	15
+
+struct badcall_node {
+	char	*bc_modname;
+	int	bc_stackdepth;
+	pc_t	bc_callstack[HAT_STACK_MAXDEPTH];
+	struct badcall_node *bc_linkage;
+};
+
+static struct badcall_node *bad_getkpfnum_callers;
+
+/*
+ * Common VM HAT routines.
+ */
+
+static void
+printwarn(struct badcall_node *bc)
+{
+	int sf;
+	char *ksym;
+	ulong_t off;
+
+	cmn_err(CE_WARN, "Module %s is using the obsolete hat_getkpfnum(9F)",
+	    bc->bc_modname);
+	cmn_err(CE_CONT, "interface in a way that will not be supported in\n");
+	cmn_err(CE_CONT, "a future release of illumos. Please notify your\n");
+	cmn_err(CE_CONT, "distribution for assistance.\n");
+}
+
+
+void
+hat_getkpfnum_badcall(void *caller)
+{
+	struct badcall_node bcs;
+	char *modname = mod_containing_pc((caddr_t)caller);
+	struct badcall_node *bc;
+
+	/*
+	 * This is a hack until the ifb and jfb framebuffer drivers
+	 * are fixed. Right now they use hat_getkpfnum() in a way that
+	 * is really safe but will be incorrectly flagged as being
+	 * buggy.
+	 */
+	if (strcmp(modname, "ifb") == 0 || strcmp(modname, "jfb") == 0)
+		return;
+
+	for (bc = bad_getkpfnum_callers; bc != NULL; bc = bc->bc_linkage)
+		if (strcmp(bc->bc_modname, modname) == 0)
+			return;
+
+	/*
+	 * We haven't seen this caller before, so create a log of
+	 * the callstack and module name, and emit a warning to the
+	 * user.
+	 */
+	bc = kmem_zalloc(sizeof (struct badcall_node), KM_NOSLEEP);
+	if (bc != NULL) {
+		bc->bc_linkage = bad_getkpfnum_callers;
+		bc->bc_modname = modname;
+		bad_getkpfnum_callers = bc;
+	} else {
+		bc = &bcs;
+		bc->bc_modname = modname;
+	}
+
+	bc->bc_stackdepth = getpcstack(bc->bc_callstack, HAT_STACK_MAXDEPTH);
+
+	printwarn(bc);
+}
+#endif /* __sparc */
diff --git a/usr/src/uts/common/vm/hat.h b/usr/src/uts/common/vm/hat.h
index a2509e7bb6..45c4198836 100644
--- a/usr/src/uts/common/vm/hat.h
+++ b/usr/src/uts/common/vm/hat.h
@@ -181,6 +181,10 @@ void	hat_thread_exit(kthread_t *);
  * pfn_t hat_getpfnum(hat, addr)
  *	returns pfn for <hat, addr> or PFN_INVALID if mapping is invalid.
  *
+ * pfn_t hat_getkpfnum(addr)
+ *	returns pfn for non-memory mapped addr in kernel address space
+ *	or PFN_INVALID if mapping is invalid or is kernel memory.
+ *
  * int hat_probe(hat, addr)
  *	return 0 if no valid mapping is present.  Faster version
  *	of hat_getattr in certain architectures.
@@ -234,6 +238,14 @@ void	hat_reserve(struct as *, caddr_t, size_t);
 pfn_t	va_to_pfn(void *);
 uint64_t va_to_pa(void *);
 
+/*
+ * hat_getkpfnum() is only supported on sparc
+ */
+#ifdef __sparc
+pfn_t	hat_getkpfnum(caddr_t);
+#endif
+
+
 /*
  * Kernel Physical Mapping (segkpm) hat interface routines.
  */
@@ -505,6 +517,13 @@ void	hat_getstat(struct as *, caddr_t, size_t, uint_t, char *, int);
 void	hat_freestat(struct as *, int);
 void	hat_resvstat(size_t, struct as *, caddr_t);
 
+/*
+ * Transitionary routine while we still allow hat_getkpfnum(caddr_t)
+ * to return a pfn for kernel memory, but want to warn the user that
+ * it isn't supported.
+ */
+void	hat_getkpfnum_badcall(void *caller);
+
 /*
  * Relocation callback routines. Currently only sfmmu HAT supports
  * these.
diff --git a/usr/src/uts/sfmmu/vm/hat_sfmmu.c b/usr/src/uts/sfmmu/vm/hat_sfmmu.c
index 76617cb130..a3b48387fa 100644
--- a/usr/src/uts/sfmmu/vm/hat_sfmmu.c
+++ b/usr/src/uts/sfmmu/vm/hat_sfmmu.c
@@ -376,6 +376,14 @@ static id_t sfmmu_cb_nextid = 0;
 static id_t sfmmu_tsb_cb_id;
 struct sfmmu_callback *sfmmu_cb_table;
 
+/*
+ * Kernel page relocation is enabled by default for non-caged
+ * kernel pages.  This has little effect unless segkmem_reloc is
+ * set, since by default kernel memory comes from inside the
+ * kernel cage.
+ */
+int hat_kpr_enabled = 1;
+
 kmutex_t	kpr_mutex;
 kmutex_t	kpr_suspendlock;
 kthread_t	*kreloc_thread;
@@ -6759,7 +6767,7 @@ hat_page_relocate(page_t **target, page_t **replacement, spgcnt_t *nrelocp)
 	int		cflags = 0;
 #endif
 
-	if (!kcage_on || PP_ISNORELOC(*target)) {
+	if (hat_kpr_enabled == 0 || !kcage_on || PP_ISNORELOC(*target)) {
 		PAGE_RELOCATE_LOG(target, replacement, EAGAIN, -1);
 		return (EAGAIN);
 	}
@@ -7773,7 +7781,7 @@ sfmmu_check_kpfn(pfn_t pfn)
 	if (hat_check_vtop == 0)
 		return;
 
-	if (kvseg.s_base == NULL || panicstr)
+	if (hat_kpr_enabled == 0 || kvseg.s_base == NULL || panicstr)
 		return;
 
 	pp = page_numtopp_nolock(pfn);
@@ -7862,6 +7870,57 @@ hat_getpfnum(struct hat *hat, caddr_t addr)
 	}
 }
 
+/*
+ * hat_getkpfnum() is an obsolete DDI routine, and its use is discouraged.
+ * Use hat_getpfnum(kas.a_hat, ...) instead.
+ *
+ * We'd like to return PFN_INVALID if the mappings have underlying page_t's
+ * but can't right now due to the fact that some software has grown to use
+ * this interface incorrectly. So for now when the interface is misused,
+ * return a warning to the user that in the future it won't work in the
+ * way they're abusing it, and carry on (after disabling page relocation).
+ */
+pfn_t
+hat_getkpfnum(caddr_t addr)
+{
+	pfn_t pfn;
+	tte_t tte;
+	int badcaller = 0;
+	extern int segkmem_reloc;
+
+	if (segkpm && IS_KPM_ADDR(addr)) {
+		badcaller = 1;
+		pfn = sfmmu_kpm_vatopfn(addr);
+	} else {
+		while ((pfn = sfmmu_vatopfn(addr, ksfmmup, &tte))
+		    == PFN_SUSPENDED) {
+			sfmmu_vatopfn_suspended(addr, ksfmmup, &tte);
+		}
+		badcaller = pf_is_memory(pfn);
+	}
+
+	if (badcaller) {
+		/*
+		 * We can't return PFN_INVALID or the caller may panic
+		 * or corrupt the system.  The only alternative is to
+		 * disable page relocation at this point for all kernel
+		 * memory.  This will impact any callers of page_relocate()
+		 * such as FMA or DR.
+		 *
+		 * RFE: Add junk here to spit out an ereport so the sysadmin
+		 * can be advised that he should upgrade his device driver
+		 * so that this doesn't happen.
+		 */
+		hat_getkpfnum_badcall(caller());
+		if (hat_kpr_enabled && segkmem_reloc) {
+			hat_kpr_enabled = 0;
+			segkmem_reloc = 0;
+			cmn_err(CE_WARN, "Kernel Page Relocation is DISABLED");
+		}
+	}
+	return (pfn);
+}
+
 /*
  * This routine will return both pfn and tte for the vaddr.
  */
diff --git a/usr/src/uts/sfmmu/vm/hat_sfmmu.h b/usr/src/uts/sfmmu/vm/hat_sfmmu.h
index 86f2bb538e..d1631e58ac 100644
--- a/usr/src/uts/sfmmu/vm/hat_sfmmu.h
+++ b/usr/src/uts/sfmmu/vm/hat_sfmmu.h
@@ -1080,6 +1080,8 @@ struct sfmmu_callback {
 extern int sfmmu_max_cb_id;
 extern struct sfmmu_callback *sfmmu_cb_table;
 
+extern int hat_kpr_enabled;
+
 struct pa_hment;
 
 /*
-- 
2.39.1

